@page "/resume"
@inject DatabaseBroker db
@inject AIProcessor aiprocessor
@using Markdig
@using Markdig.Extensions



<h1>Resume Generation</h1>

<div>
    <textarea @bind="jobAdText" placeholder="Paste the job ad here" rows="10" style="width: 100%;"></textarea>
    <button class="btn btn-primary" @onclick="GenerateResume">Generate Resume</button>
</div>

@if (!string.IsNullOrEmpty(generatedResume))
{
    <h2 style="margin-top:64px; margin:auto; width:fit-content;">Generated Resume</h2>
    <div style="border:solid; border-width:2px; padding:16px; max-width:700px; margin:auto; margin-top:32px;">@(new MarkupString(ConvertMarkdownToHtml(generatedResume)))</div>
}

@code {
    // Create variables to store the job ad text and the generated resume
    private string jobAdText;
    private string generatedResume;

    // Takes the users job/edu experience, a job ad, and generates a resume based on the job ad
    private async Task GenerateResume()
    {
        var employmentInfo = string.Join("\n\n", db.JobList.Select(job =>
            $"{job.JobTitle} at {job.Company}\n{job.StartDate:MMM yyyy} to {job.EndDate:MMM yyyy}\n{job.Description}\nDetails:\n{string.Join("\n", job.DetailList.Select(detail => detail.Details))}"));

        var educationInfo = string.Join("\n\n", db.EduList.Select(edu =>
            $"{edu.Program} at {edu.School}\n{edu.StartDate:yyyy} to {edu.EndDate:yyyy}"));

        var prompt = $"{jobAdText}\n\n---\n\n{employmentInfo}\n\n{educationInfo}\n\n---Based on the above job description and the provided employment and educational experience, create a resume that incorporates all the relevant experience and rewords the details to include the key words and prerequisites from the job description. The resume should be about a page in length, and should only include relevant experience.";

        try
        {
            generatedResume = await aiprocessor.SendToGPT(prompt);
        }
        // Catch and errors and display them in the generation box.
        catch (Exception e)
        {
            generatedResume = e.Message;
            if (e.InnerException != null)
            {
                generatedResume += "\n" + e.InnerException.Message;
            }
        }
    }

    // Converts markdown generated by GPT to html
    private string ConvertMarkdownToHtml(string markdown)
    {
        var pipeline = new Markdig.MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        return Markdig.Markdown.ToHtml(markdown, pipeline);
    }
}
